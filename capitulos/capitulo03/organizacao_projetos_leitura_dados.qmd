---
title: "Organização Estrutural de Projetos de Análise de Dados em R"
subtitle: "Ou: Como Deixar Seus Arquivos em Ordem e Nunca Mais se Perder em Pastas!"
---

## Já passou por isso?

> Você já se viu perdido entre arquivos, sem saber onde está o dado bruto ou a figura final? Este capítulo vai mostrar como evitar esse caos e ganhar produtividade em análise de dados!

## Estrutura recomendada de diretórios

Organize sempre seu projeto em uma estrutura clara, separando dados brutos, dados tratados, scripts, imagens, resultados e documentos. Por exemplo:

```         
├── dados/
│   ├── brutos/
│   └── limpos/
├── imagens/
├── scripts/
├── resultados/
├── README.md
```

> **Por que essa organização?**\
> Ter pastas separadas impede que você misture arquivos originais e processados, além de facilitar muito o entendimento para qualquer pessoa que precisar reutilizar ou revisar seu projeto. Lembre-se: projetos científicos são (ou deveriam ser) sempre reprodutíveis!

## Como construir caminhos robustos nos seus scripts

Em vez de usar caminhos fixos (como `C:/meus_dados/dados.csv`), use sempre caminhos relativos à raiz do projeto, assim seu script vai funcionar em qualquer computador — inclusive de colaboradores.\
Para isso, utilize os pacotes `rprojroot` e `fs`:

``` r
library(rprojroot)
library(fs)

root <- rprojroot::find_root(
  rprojroot::is_rstudio_project |
  rprojroot::is_git_root |
  rprojroot::has_file("README.md")
)

caminho_dados_brutos <- fs::path(root, "dados", "brutos")
caminho_dados_limpos <- fs::path(root, "dados", "limpos")
caminho_imagens      <- fs::path(root, "imagens")
```

> **Dica didática:**\
> Isso permite que você envie seu projeto para o GitHub, Dropbox ou até mesmo um colega por e-mail e ele rode tudo sem precisar editar caminhos de arquivo!

## Caixa de Destaque

> **Dica:** Estruturar o projeto dessa forma evita dores de cabeça na hora de compartilhar, revisar ou publicar análises!

## Como acessar seus arquivos de dados

Acesse sempre os arquivos usando os caminhos definidos acima.\
Veja como fica fácil para ler seus dados:

``` r
# Para ler um arquivo CSV dos dados brutos:
dados_brutos <- readr::read_csv(fs::path(caminho_dados_brutos, "meus_dados.csv"))

# Para ler uma planilha Excel, aba 3:
dados_excel <- readxl::read_excel(fs::path(caminho_dados_brutos, "dados_amostras.xlsx"), sheet = 3)
```

> **Por que isso é importante?**\
> Quando você mantém dados brutos separados, evita sobrescrever arquivos originais por acidente e mantém um “histórico” do dado exatamente como foi recebido/coletado.

## Leitura, gravação e limpeza de dados no projeto estruturado

Este é o passo a passo moderno para trazer seus dados para a análise, limpá-los e garantir que tudo está pronto para ser analisado — tudo isso usando a estrutura do projeto.

### Leitura dos dados (sempre em `dados/brutos/`)

``` r
library(readr)
dados_csv <- readr::read_csv(fs::path(caminho_dados_brutos, "exemplo_dados.csv"))

library(readxl)
dados_xls <- readxl::read_excel(fs::path(caminho_dados_brutos, "exemplo_dados.xlsx"), sheet = 1)

# Ou usando o pacote rio (aceita vários formatos)
library(rio)
dados <- rio::import(fs::path(caminho_dados_brutos, "exemplo_dados.xlsx"))
```

> **Comentário didático:**\
> Você pode receber dados em diferentes formatos (csv, xlsx, txt, etc). Use o pacote mais adequado — e, se não quiser decorar várias funções, o pacote `rio` resolve quase tudo!

### Limpeza e organização inicial

Antes de analisar, é fundamental padronizar nomes de variáveis, converter tipos de dados (como “idade” para numérico ou “espécie” para fator) e garantir que não há duplicatas.

``` r
library(janitor)
library(dplyr)

dados_tratados <- dados_csv |> 
  janitor::clean_names() |> 
  mutate(
    especie = as.factor(especie),
    peso = as.numeric(peso)
  ) |> 
  distinct()
```

> **Por que fazer isso?**\
> - Nomes padronizados facilitam a escrita de código limpo. - Tipos de variáveis corretos garantem resultados estatísticos certos. - Remover duplicatas e corrigir inconsistências evita erros e distorções nos resultados.

### Gravação dos dados tratados em `dados/limpos/`

Guarde sempre a versão limpa e tratada dos dados em outra pasta.\
Assim, você mantém o dado bruto intacto e pode sempre “recomeçar” caso precise.

``` r
# Salvar como Excel
writexl::write_xlsx(
  dados_tratados, 
  fs::path(caminho_dados_limpos, "exemplo_dados_tratados.xlsx")
)

# Salvar como CSV
readr::write_csv(
  dados_tratados, 
  fs::path(caminho_dados_limpos, "exemplo_dados_tratados.csv")
)

# Usando rio (flexível para vários formatos)
rio::export(
  dados_tratados, 
  fs::path(caminho_dados_limpos, "exemplo_dados_tratados.xlsx")
)
```

> **Dica prática:**\
> Com esse padrão, seus scripts sempre terão um ponto de partida confiável (“dados brutos”) e uma base limpa para análise.

------------------------------------------------------------------------

### DICA AVANÇADA: Salve seus dados sem perder as classes das variáveis!

Sempre que você quiser garantir que as **classes** das variáveis (como fator, data, inteiro, etc.) sejam mantidas, utilize o formato **Parquet** com o pacote `arrow`.\
Esse formato é: - Compacto e eficiente - Compatível com R, Python e outros sistemas modernos - Mantém todas as informações dos tipos das variáveis

**Exemplo em R:**

``` r
library(arrow)

# Salvar os dados tratados em formato Parquet
write_parquet(
  dados_tratados,
  fs::path(caminho_dados_limpos, "exemplo_dados_tratados.parquet")
)

# Ler os dados de volta
dados_lidos <- read_parquet(
  fs::path(caminho_dados_limpos, "exemplo_dados_tratados.parquet")
)
```

> **Resumo:** Sempre que quiser compartilhar dados entre R e Python, ou preservar todos os tipos de variáveis, prefira o formato Parquet!

------------------------------------------------------------------------

### Tabela-resumo dos principais comandos

| Ação | Função | Pacote | Exemplo |
|----|----|----|----|
| Detectar raiz projeto | `find_root()` | rprojroot | `root <- find_root(...)` |
| Caminho de pasta | `fs::path()` | fs | `fs::path(root, "dados", "brutos")` |
| Ler CSV | `read_csv()` | readr | `read_csv(fs::path(caminho_dados_brutos, "arq.csv"))` |
| Ler Excel | `read_excel()` | readxl | `read_excel(fs::path(caminho_dados_brutos, "arq.xlsx"), sheet = 1)` |
| Limpar nomes colunas | `clean_names()` | janitor | `clean_names(df)` |
| Salvar Excel | `write_xlsx()` | writexl | `write_xlsx(df, fs::path(caminho_dados_limpos, "arq_tratado.xlsx"))` |
| Salvar CSV | `write_csv()` | readr | `write_csv(df, fs::path(caminho_dados_limpos, "arq_tratado.csv"))` |
| Importar/Exportar | `import()`/`export()` | rio | `import(fs::path(caminho_dados_brutos, "arq.xlsx"))` / `export(df, fs::path(...))` |
| Salvar Parquet | `write_parquet()` | arrow | `write_parquet(df, fs::path(caminho_dados_limpos, "arq.parquet"))` |
| Ler Parquet | `read_parquet()` | arrow | `read_parquet(fs::path(caminho_dados_limpos, "arq.parquet"))` |

## Como inserir imagens nos relatórios

Use sempre a pasta de imagens do projeto para manter tudo organizado.\
No Quarto ou R Markdown, utilize:

```{r}
#| eval: false
#| label: fig-estrutura-pastas
#| fig-cap: "Estrutura de pastas recomendada para projetos reprodutíveis."

knitr::include_graphics(as.character(fs::path(caminho_imagens, "estrutura_pastas_atualizada.png")))
```

> **Dica:** Sempre use `as.character()` em `fs::path` para garantir compatibilidade com funções do R base ou knitr.\
>
> Mantenha as imagens em formato PNG ou SVG para qualidade nos relatórios científicos..

## Dados em formato tidy

> **Definição didática:**\
> - Cada variável deve estar em uma coluna - Cada observação em uma linha - Cada valor em uma célula

Organizar dados nesse formato facilita qualquer análise estatística e visualização posterior.

## Controle de versões com Git

O uso de Git (e plataformas como GitHub) não é só para programadores:\
- Permite rastrear mudanças em scripts e até dados (preferencialmente dados pequenos). - Facilita a colaboração. - Garante que você nunca perderá versões importantes do seu trabalho.

> **Dica:** Adote o versionamento desde o início. Seu “eu do futuro” agradece!

## Dicas finais

-   Sempre mantenha os dados brutos intactos.
-   Documente todas as etapas de limpeza/tratamento em scripts próprios.
-   Use scripts reprodutíveis e caminhos relativos sempre que possível.
-   Compartilhe seus projetos com estrutura clara para facilitar colaborações e revisões.

------------------------------------------------------------------------

## Exemplo de arquivo CSV para download

``` r
# Gera um dataframe exemplo para exportar como csv
exemplo_csv <- data.frame(
  especie = c("Tambaqui", "Pirarucu", "Piau"),
  peso = c(520, 850, 305),
  comprimento_cm = c(35.5, 40.0, 28.2)
)

# Salvar para download manual (fora do RMarkdown)
write.csv(exemplo_csv, "exemplo_dados.csv", row.names = FALSE)
```

> O arquivo `exemplo_dados.csv` pode ser usado para testar as funções deste capítulo.
